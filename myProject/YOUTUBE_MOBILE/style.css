/*
  본격적으로 아이템 하나하나를 꾸며주기 전에
  전반적으로 프로젝트에서 쓰니는 색이나 사이즈 등을
  변수로 잘 정리해서 
  하나하나 메뉴얼하게 다 쓰는 것 보다,
  나중에 변경사항이 있어 하나하나 찾아가서 바꾸는 것 보다,
  변수를 정의해서 쓰면 좋다.

  그렇게 조금 더 Consistent(한결같은, 일정한) 디자인을 할 수 있다.
*/
:root {
  /* Color */
  --white-color: #fff;
  --black-color: #140a00;
  --blue-color: #045fd4;
  --red-color: #ff0000;
  --grey-dark-color: #909090;
  --grey-light-color: #e0e0e0;

  /* Size */
  --padding: 12px; /* 양 옆 패딩 일정히 */
  --avatar-size: 36px; /* 아이콘 사이즈 */

  /* Font Size */
  --font-large: 18px;
  --font-medium: 14px;
  --font-small: 12px;
  --font-micro: 10px;
}

* {
  /* 모든 태그에 */
  padding: 2px;
  margin: 0;
  box-sizing: border-box; /* padding이나 margin을 줬을때 그것이 포함돼 사이즈가 결정되도록.. */
}

body {
  font-family: Roboto;
}

ul {
  list-style: none;
}

button,
button:focus {
  /* 버튼과 버튼이 포커스 되었을 때 */
  /* 브라우저 자체에서 꾸며주는 버튼 속성 없애기 */
  border: none; /* 경계선 없애기, padding은 *에서 이미 지정해서 없애줌. */
  cursor: pointer;
  outline: none;
}

/* Header */
header {
  display: flex;
  justify-content: space-between;
  padding: var(--padding);
  background-color: var(--white-color);
  color: var(--black-color);
  max-width: 1510px;
}

header .logo {
  font-size: var(--font-large);
}

header .logo i {
  color: var(--red-color);
}

header .icons .fa-search {
  margin-right: var(--padding);
}

/* Video Player */
.player {
  /* 
  position: sticky; 얘를 쓰면 이제 스크롤 내려도 고정됨.
  top: 0; position을 쓰게되면 어디로 position할건지의 힌트다. 
  */
  position: relative;
  text-align: center;
  background-color: var(--black-color);
  padding-bottom: 30.25%;
  max-width: 1510px;
}

.player video {
  position: absolute;
  /* 아이템을 반응형으로 만들 수 있는 가장 좋은 방법은 
    %를 이용하는게 좋다. 그럼 컨테이너에 맞게 채워 보여줄 수 있다.

    하지만 영상을 확인해보면  강제적으로 html 태그 안에 
    width 값과, height값이 고정 돼 있다.
    이런 경우엔 브라우저에서 항상 저 값으로 읽어들이려고 하기 때문에
    문제가 된다. 16:9라는 화면 비율을 유지하기 위한 강제적인
    저런 옵션이 문제가 된 것이다.

    그래서 내가 사용한 방식은 이러하다.
    이 방식의 핵심적인 내용은 자식요소(video)는 position : absolute로 설정해주고, 
    부모 요소(player)는 padding-bottom 값을 적절한 %로 주는 것이다. 

  여기서 내가 계산한 비율은 계산했을때 높이가 가로에 비해 
  해당 %를 차지하기 때문에 이와같이 강제로 패딩값을 주는 것이다. 
  이 방식으로 항상 일관된 몇 : 몇의 비율을 유지시켜주는 것입니다. 
  */
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  /* 그런데 너무 커져버리면 브라우져 전체를 다 차지해서 아래 아이템이 안보여
    그러니 max-width로 경계선 지정해줘.
  */
  max-width: 1550px;
}

body > .info {
  padding: var(--padding);
}

.info .metadata .hashtags {
  display: flex;
  font-size: var(--font-small);
  color: var(--blue-color);
}

.info .metadata .hashtags li {
  margin-right: var(--padding);
}

.info .metadata .titleAndButton {
  display: flex;
}

.info .metadata .titleAndButton .title {
  font-size: var(--font-medium);
  /* 사이즈가 줄어 글자가 밑으로 내려가도 2줄만 나오게 하려면?
    방법을 모르면 검색 -> css line clamp 검색후 MDN사이트
  */
  margin-right: var(--padding);
}

.info .metadata .titleAndButton .title.clamp {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2; /* 제한하고 싶은 수치 */
  overflow: hidden;
}

.info .metadata .titleAndButton .moreBtn {
  height: 100%;
  transition: transform 300ms ease-in-out;
}

.info .metadata .titleAndButton .moreBtn.clicked {
  /* 클릭히 화살표 방향 변화 */
  transform: rotate(180deg);
}

.info .views {
  font-size: var(--font-small);
  color: var(--grey-dark-color);
}

/* Action Buttons */
.info .actions {
  display: flex;
  justify-content: space-around; /* 간격을 골고루 */
  margin: var(--padding) 0; /* 위 아래 패딩 넣고, 양 옆 없애주고 */
}

.info .actions button {
  display: flex;
  flex-direction: column; /* 아이콘이 위로, 텍스트가 아래로 */
  font-size: var(--font-small);
  color: var(--grey-dark-color);
  background-color: var(--white-color);
}

.info .actions button i {
  /* 아이콘과 텍스트가 너무 붙어있으니 떼줘 */

  /* 아이콘들이 너무 왼쪽으로 치우친걸 해결 
    위아래로는 지정하지 않고 양 옆을 auto로 할 시에 
    아이템들이 중간에 배치됨.

    그리고 margin사용 후 margin-bottom을 선언했기 때문에 0 
    bottom이 오버라이팅 함.
  */
  margin: 0 auto;
  /* 지정된 패딩의 반만 넣고 싶으면 calc()함수 사용. */
  margin-bottom: calc(var(--padding) / 2);
  font-size: 16px;
}

.info .actions button i.active {
  /* i에 active라고 돼 있는 것들만 누를시 파랑색으로 */
  color: var(--blue-color);
}

/* Channel Description */
.info .channel {
  display: flex;
  justify-content: space-between;
  border-top: 1px solid var(--grey-light-color);
  border-bottom: 1px solid var(--grey-light-color);
}

.info .channel .metadata {
  display: flex;
  align-items: center;
}

.info .channel .metadata img {
  width: var(--avatar-size);
  height: var(--avatar-size);
  border-radius: 50%;
}

.info .channel .metadata .info {
  display: flex;
  flex-direction: column;
}

.info .channel .metadata .info .name {
  font-size: var(--font-medium);
}

.info .channel .metadata .info .subscribers {
  display: flex;
  font-size: var(--font-small);
  color: var(--grey-dark-color);
  background-color: var(--white-color);
}

.info .channel .subscribe {
  /* 대문자로 */
  text-transform: uppercase;
  color: var(--red-color);
  font-size: var(--font-medium);
}

/* upNext */
.upNext {
  padding: 0 var(--padding);
}

.upNext > .title {
  /* 자식노드 셀렉터 > 이용. */
  font-size: var(--font-medium);
  color: var(--grey-dark-color);
  margin-bottom: calc(var(--padding) / 2);
}

.upNext .item {
  display: flex;
  margin-top: var(--padding);
}

.upNext .item .img {
  flex: 1 1 30%;
  margin-right: var(--padding);
}

.upNext .item .img img {
  width: 100%;
}

.upNext .item .info {
  flex: 1 1 65%;
}

.upNext .item .moreBtn {
  flex: 1 1 5%;
}

.upNext .item .info {
  display: flex;
  flex-direction: column;
}

.upNext .item .info .title {
  font-size: var(--font-small);
}

.upNext .item .info .name,
.upNext .item .info .views {
  font-size: var(--font-micro);
  color: var(--grey-dark-color);
}

.infoAndUpNext {
  /* 평소 */
  display: flex;
  flex-direction: column;
}

@media screen and (min-width: 768px) {
  .infoAndUpNext {
    flex-direction: row;
    margin: var(--padding) 0;
  }
}
